
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

//   __   __  _                    _        __               
//   \ \ / / (_)                  | |       \_\              
//    \ V /   _   _ __       ___  | |__     __ _    ___      
//     > <   | | | '_ \     / __| | '_ \   / _` |  / _ \     
//    / . \  | | | | | |   | (__  | | | | | (_| | | (_) |    
//   /_/_\_\ |_| |_| |_|    \___| |_| |_|  \__,_|  \___/ 
//
//    _____                    __      __              _
//   |_   _| ( )               \ \    / / (_)         | |    
//     | |   |/   _ __ ___      \ \  / /   _   _ __   | |__  
//     | |       | '_ ` _ \      \ \/ /   | | | '_ \  | '_ \ 
//    _| |_      | | | | | |      \  /    | | | | | | | | | |
//   |_____|     |_| |_| |_|       \/     |_| |_| |_| |_| |_|
//                                          
// Contact: vn.ncvinh@gmail.com                                         
// Facebook: facebook.com/vn.ncvinh
// Github: github.com/vnncv
/**
 *
 * @author ncvinh
 */
public class Main extends javax.swing.JFrame {
    Image icon = new ImageIcon("key.png").getImage();
    char[] lower = "abcdefghiklmnopqrstuvwxyz".toCharArray();
    char[] upper = "ABCDEFGHIKLMNOPQRSTUVWXYZ".toCharArray();
    char[] number = "0123456789".toCharArray();
    char[] special = "`~!@#$%^&*()-=_+[{]}\\|;':\",.<>/?".toCharArray();
    Random r = new Random();
    

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        password = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        point = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        gen = new javax.swing.JButton();
        lowercaseopt = new javax.swing.JCheckBox();
        uppercaseopt = new javax.swing.JCheckBox();
        specialopt = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        numberopt = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        passwordlength = new javax.swing.JTextField();
        lengthtxt = new javax.swing.JLabel();
        pooltxt = new javax.swing.JLabel();
        danhgiatxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Password Entropy");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        password.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        password.setToolTipText("");
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Điểm:");

        point.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        point.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        point.setText("0.000");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Mật khẩu:");

        gen.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        gen.setText("Tạo Mật Khẩu");
        gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genActionPerformed(evt);
            }
        });

        lowercaseopt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lowercaseopt.setSelected(true);
        lowercaseopt.setText("Chữ thường");

        uppercaseopt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        uppercaseopt.setSelected(true);
        uppercaseopt.setText("Chữ hoa");

        specialopt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        specialopt.setSelected(true);
        specialopt.setText("Ký tự đặc biệt");

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton2.setText("Dán");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton3.setText("Sao chép");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        numberopt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        numberopt.setSelected(true);
        numberopt.setText("Chữ số");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Độ dài");

        passwordlength.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        passwordlength.setText("12");

        lengthtxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lengthtxt.setText("Độ dài: 0");

        pooltxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        pooltxt.setText("Pool: 0");

        danhgiatxt.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        danhgiatxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(point, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(184, 184, 184))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lowercaseopt)
                                    .addComponent(uppercaseopt))
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(specialopt)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(26, 26, 26)
                                        .addComponent(passwordlength, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(numberopt))
                                .addGap(43, 43, 43)
                                .addComponent(gen, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(131, 131, 131)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pooltxt)
                        .addGap(66, 66, 66)
                        .addComponent(lengthtxt)))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(danhgiatxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(point))
                .addGap(6, 6, 6)
                .addComponent(danhgiatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lowercaseopt)
                            .addComponent(specialopt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uppercaseopt)
                            .addComponent(numberopt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(passwordlength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(gen, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pooltxt)
                    .addComponent(lengthtxt))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String c;
        try {
            c = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
            password.setText(c);
            updatepoint();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String str = password.getText();

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection strSel = new StringSelection(str);
        clipboard.setContents(strSel, null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genActionPerformed
        int length = Integer.parseInt(passwordlength.getText());
        String passwd = "";
        ArrayList option = new ArrayList();

        if (lowercaseopt.isSelected()) {
            option.add(1);
        }
        if (uppercaseopt.isSelected()) {
            option.add(2);
        }
        if (numberopt.isSelected()) {
            option.add(3);
        }
        if (specialopt.isSelected()) {
            option.add(4);
        }

        for (int i = 0; i < length; i++) {
            int rd = (int) option.get(r.nextInt(option.size()));
            switch (rd) {
                case 1:
                    passwd += lower[r.nextInt(lower.length)];
                    break;
                case 2:
                    passwd += upper[r.nextInt(upper.length)];
                    break;
                case 3:
                    passwd += number[r.nextInt(number.length)];
                    break;
                case 4:
                    passwd += special[r.nextInt(special.length)];
                    break;
            }
        }
        password.setText(passwd);
        updatepoint();
    }//GEN-LAST:event_genActionPerformed

    private void passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyReleased
        // TODO add your handling code here:
        updatepoint();
    }//GEN-LAST:event_passwordKeyReleased

    private void updatepoint() {
        int pool = 0;
        if (password.getText().contains(" ")) {
            password.setText(password.getText().replace(" ", ""));
        }

        int length = password.getText().length();
        if (length > 0) {
            char ch;
            boolean capitalFlag = false;
            boolean lowerCaseFlag = false;
            boolean numberFlag = false;
            boolean specialFlag = false;
            for (int i = 0; i < length; i++) {
                ch = password.getText().charAt(i);
                if (Character.isDigit(ch)) {
                    if (!numberFlag) {
                        numberFlag = true;
                        pool += 10;
                    }
                } else if (Character.isUpperCase(ch)) {
                    if (!capitalFlag) {
                        capitalFlag = true;
                        pool += 26;
                    }
                } else if (Character.isLowerCase(ch)) {
                    if (!lowerCaseFlag) {
                        lowerCaseFlag = true;
                        pool += 26;
                    }
                } else if (!specialFlag) {
                    specialFlag = true;
                    pool += 32;
                }

            }
            DecimalFormat df = new DecimalFormat();
            df.setMaximumFractionDigits(3);
            float entropy = (float) (length * (Math.log(pool) / Math.log(2)));
            point.setText("" + df.format(entropy));
            if (entropy < 28) {
                danhgiatxt.setText("Rất yếu");
//                danhgiatxt.setForeground(Color.red);
            } else if (entropy < 36) {
                danhgiatxt.setText("Yếu");
//                danhgiatxt.setForeground(Color.red);
            } else if (entropy < 60) {
                danhgiatxt.setText("Trung bình");
//                danhgiatxt.setForeground(Color.yellow);
            } else if (entropy < 128) {
                danhgiatxt.setText("Mạnh");
//                danhgiatxt.setForeground(Color.green);
            } else {
                danhgiatxt.setText("Rất mạnh");
//                danhgiatxt.setForeground(Color.green);
            }
            pooltxt.setText("Pool: " + pool);
            lengthtxt.setText("Độ dài: " + length);
        } else {
            point.setText("0.000");
//            point.setForeground(Color.red);
            danhgiatxt.setText("");
            pooltxt.setText("Pool: 0");
            lengthtxt.setText("Độ dài: 0");

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel danhgiatxt;
    private javax.swing.JButton gen;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lengthtxt;
    private javax.swing.JCheckBox lowercaseopt;
    private javax.swing.JCheckBox numberopt;
    private javax.swing.JTextField password;
    private javax.swing.JTextField passwordlength;
    private javax.swing.JLabel point;
    private javax.swing.JLabel pooltxt;
    private javax.swing.JCheckBox specialopt;
    private javax.swing.JCheckBox uppercaseopt;
    // End of variables declaration//GEN-END:variables
}
